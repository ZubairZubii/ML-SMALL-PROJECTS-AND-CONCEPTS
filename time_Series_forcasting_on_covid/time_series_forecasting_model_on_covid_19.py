# -*- coding: utf-8 -*-
"""Time_series_forecasting_model_on_covid-19

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bFr9Kq9NZezodMP6XQBiKmrFixn4jhjh
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import plotly.express as px

from sklearn.metrics import r2_score

!pip install prophet

from prophet import Prophet

plt.style.use("ggplot")

df0 = pd.read_csv("CONVENIENT_global_confirmed_cases.csv")
df1 = pd.read_csv("CONVENIENT_global_deaths.csv")

df0.iloc[0][1]

world = pd.DataFrame({"Country":[],"Cases":[]})
world["Country"] = df0.iloc[:,1:].columns
cases = []
for i in world["Country"]:
    cases.append(pd.to_numeric(df0[i][1:]).sum())
world["Cases"]=cases


country_list=list(world["Country"].values)
idx = 0
for i in country_list:
    sayac = 0
    for j in i:
        if j==".":
            i = i[:sayac]
            country_list[idx]=i
        elif j=="(":
            i = i[:sayac-1]
            country_list[idx]=i
        else:
            sayac += 1
    idx += 1
world["Country"]=country_list
world = world.groupby("Country")["Cases"].sum().reset_index()
world.head()
continent=pd.read_csv("continents2.csv")
continent["name"]=continent["name"].str.upper()

continent

continent[continent["name"]=="AFGHANISTAN"]["alpha-3"].values[0]

world

# Create Choropleth Map
fig = px.choropleth(world.dropna(),
                    locations="Alpha3",
                    color="Cases Range",
                    projection="mercator",
                    color_discrete_sequence=["#ffedea", "#ffcccb", "#ff9999", "#ff6666", "#ff3333"],
                    hover_name="Country",         # Show country name on hover
                    title="COVID-19 Cases by Country", # Title for the map
                    labels={"Cases Range": "Cases Range"} # Label for legend
                   )

# Update geographic and layout settings
fig.update_geos(fitbounds="locations", visible=False)
fig.update_layout(
    margin={"r":0, "t":50, "l":0, "b":0}, # Adjust top margin for title
    title_font=dict(size=24),              # Title font size
    legend_title_font=dict(size=18),       # Legend title font size
    legend_font=dict(size=14),               # Legend font size
    width=1200,                             # Set width of the figure
    height=600
)

# Show the map
fig.show()

df0

df0

df0.iloc[:,1:]

df0.iloc[:,1]

# Sample DataFrame creation (You should replace this with your actual DataFrame)
# df0 and df1 should already be defined based on your earlier context

# Calculate daily cases
count = []
for i in range(1, len(df0)):
    count.append(sum(pd.to_numeric(df0.iloc[i, 1:].values)))

# Create DataFrame for cases
df = pd.DataFrame()
df["Date"] = df0["Country/Region"][1:]
df["Cases"] = count
df = df.set_index("Date")

# Calculate daily deaths
count = []
for i in range(1, len(df1)):
    count.append(sum(pd.to_numeric(df1.iloc[i, 1:].values)))

df["Deaths"] = count

# Set the figure size and style
plt.figure(figsize=(12, 6))
plt.style.use('seaborn-darkgrid')

# Plot daily cases with custom color and marker
df.Cases.plot(title="Daily COVID-19 Cases in the World",
               marker='o',
               color='royalblue',
               markersize=5,
               linewidth=2,
               label="Daily Cases")

# Plot 5-day moving average with custom color and linestyle
df.Cases.rolling(window=5).mean().plot(color='orange',
                                         linewidth=2,
                                         label="5-Day Moving Average")

# Add titles and labels
plt.title("Daily COVID-19 Cases and 5-Day Moving Average", fontsize=16)
plt.xlabel("Date", fontsize=14)
plt.ylabel("Number of Cases", fontsize=14)
plt.xticks(rotation=45)  # Rotate date labels for better readability
plt.legend(fontsize=12)

# Add a grid for better readability
plt.grid(visible=True)

# Show the plot
plt.tight_layout()  # Adjust layout to prevent clipping of tick-labels
plt.show()

df

# Set the figure size and style
plt.figure(figsize=(12, 6))
plt.style.use('seaborn-darkgrid')

# Plot daily deaths with custom color and marker
df.Deaths.plot(title="Daily COVID-19 Deaths in the World",
                marker='o',
                color='firebrick',
                markersize=5,
                linewidth=2,
                label="Daily Deaths")

# Plot 5-day moving average with custom color and linestyle
df.Deaths.rolling(window=5).mean().plot(color='orange',
                                          linewidth=2,
                                          label="5-Day Moving Average")

# Add titles and labels
plt.title("Daily COVID-19 Deaths and 5-Day Moving Average", fontsize=16)
plt.xlabel("Date", fontsize=14)
plt.ylabel("Number of Deaths", fontsize=14)
plt.xticks(rotation=45)  # Rotate date labels for better readability
plt.legend(fontsize=12)

# Add a grid for better readability
plt.grid(visible=True)

# Show the plot
plt.tight_layout()  # Adjust layout to prevent clipping of tick-labels
plt.show()

df.iloc[:,0]

class Fbprophet(object):
    def fit(self, data):
        self.data = data
        self.model = Prophet(weekly_seasonality=True, daily_seasonality=False, yearly_seasonality=False)
        self.model.fit(self.data)

    def forecast(self, periods, freq):
        self.future = self.model.make_future_dataframe(periods=periods, freq=freq)
        self.df_forecast = self.model.predict(self.future)

    def plot(self, xlabel="Years", ylabel="Values"):
        self.model.plot(self.df_forecast, xlabel=xlabel, ylabel=ylabel, figsize=(12, 6))  # Increased figure size
        self.model.plot_components(self.df_forecast, figsize=(12, 8))

    def R2(self):
        print(self.df_forecast.yhat)
        return r2_score(self.data.y, self.df_forecast.yhat[:len(self.data)])

# Prepare data for model
df_fb = pd.DataFrame({"ds": [], "y": []})
df_fb["ds"] = pd.to_datetime(df.index)
df_fb["y"] = df.iloc[:, 0].values

# Initialize and fit the model
model = Fbprophet()
model.fit(df_fb)

# Forecast for the next 30 days
model.forecast(30, "D")
r2_value = model.R2()
print(f"R^2 Value: {r2_value:.4f}")  # Print RÂ² value

# Prepare forecast for plotting
forecast = model.df_forecast[["ds", "yhat_lower", "yhat_upper", "yhat"]].tail(30).reset_index().set_index("ds").drop("index", axis=1)

# Plotting the forecast with improved aesthetics
plt.figure(figsize=(12, 6))
plt.plot(forecast.index, forecast["yhat"], marker="o", color="blue", label="Forecast", linewidth=2)  # Changed marker and color
plt.fill_between(x=forecast.index, y1=forecast["yhat_lower"], y2=forecast["yhat_upper"], color="lightgray", alpha=0.5, label="Confidence Interval")  # Changed color
plt.axhline(0, color='black', linewidth=0.8, linestyle='--')  # Add a baseline at y=0
plt.title("Forecasting of Next 30 Days Cases", fontsize=16)
plt.xlabel("Date", fontsize=14)
plt.ylabel("Cases", fontsize=14)
plt.xticks(rotation=45)  # Rotate x-axis labels for better readability
plt.grid(visible=True, linestyle='--', alpha=0.6)  # Add grid lines
plt.legend(loc="upper left", fontsize=12)  # Style the legend
plt.tight_layout()  # Adjust layout
plt.show()

